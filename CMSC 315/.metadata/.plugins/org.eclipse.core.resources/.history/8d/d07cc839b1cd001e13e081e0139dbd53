package project_3;
import java.util.ArrayList;

public class BinaryTree {
	private TreeNode root;
	
	private static class TreeNode{
		int val;
		TreeNode left;
		TreeNode right;
		
		public TreeNode(int val){
			this.val = val;
		}
	}
	
	private TreeNode buildTree(String[] values, int start, int end) {
		if (start > end)
			return null;
		TreeNode node = new TreeNode(Integer.parseInt(values[start]));
		int splitIdx = start + 1;
		while(splitIdx <= end &&
				!values[splitIdx].equals(String.valueOf(node.val))) {
			splitIdx++;
		}
		node.left = buildTree(values, start + 1, splitIdx - 1);
		node.right = buildTree(values, splitIdx, end);
		return node;
	}
	
	private TreeNode buildBalancedTree(int[] values, int start, int end) {
		if (start > end)
			return null;
		int mid = (start + end) / 2;
		TreeNode node = new TreeNode(values[mid]);
		node.left = buildBalancedTree(values, start, mid - 1);
		node.right = buildBalancedTree(values, mid + 1, end);
		return node;
	}
	
	public BinaryTree(String preorder) {
		this.root = buildTree(preorder);
	}
	
	public BinaryTree(ArrayList<Integer> values) {
		int[] valArr = new int[values.size()];
		for(int i = 0; i < values.size(); i++)
			valArr[i] = values.get(i);
		this.root = buildBalancedTree(valArr, 0, valArr.length - 1);
	}
	
	public void printIndented() {
		printIndented(root, 0);
	}
	
	public void printIndented(TreeNode node, int depth) {
		if (node == null)
			return;
		for (int i = 0; i < depth; i++)
			System.out.print("  ");
		System.out.println(node.val);
		printIndented(node.left, depth + 1);
		printIndented(node.right, depth + 1);
	}
	
	public int getHeight() {
		return height(root);
	}
	
	private int height(TreeNode node) {
		if (node == null) {
			return -1;
		}
		int leftHeight = height(node.left);
		int rightHeight = height(node.right);
		
		return Math.max(leftHeight, rightHeight) + 1;
	}
	
	public boolean isBalanced() {
		return checkHeight(root) != -1;
	}
	
	private int checkHeight(TreeNode node) {
		if (node == null)
			return 0;
		int leftHeight = checkHeight(node.left);
		if (leftHeight == -1)
			return -1;
		int rightHeight = checkHeight(node.right);
		if (rightHeight == -1 || Math.abs(leftHeight - rightHeight) > 1)
			return -1;
		return Math.max(leftHeight, rightHeight) + 1;
		
	}
	
	public ArrayList<Integer> getValues() {
		ArrayList<Integer> values = new ArrayList<>();
		preOrderTraversal(root, values);
		return values;
	}
	
	public void preOrderTraversal(TreeNode node, ArrayList<Integer> values) {
		if (node != null) {
			values.add(node.val);
			preOrderTraversal(node.left, values);
			preOrderTraversal(node.right, values);
		}
	}
}
