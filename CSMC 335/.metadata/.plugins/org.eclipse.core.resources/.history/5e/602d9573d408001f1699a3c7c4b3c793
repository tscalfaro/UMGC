package application;

import java.util.ArrayList;
import java.util.List;

import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;

public class Lane extends Pane implements Runnable{
	private Rectangle lane;
	private Circle light;
	private Color lightColor = Color.GREEN;
	private double width = 200;
	private double height = 500;
	private List<Car> cars;
	private TrafficLight trafficLight;
	private boolean stop = false;
	
	public Lane() {
		this.trafficLight = new TrafficLight();
		this.cars = new ArrayList<>();
		initializeGUI();
	}
	
	public void initializeGUI() {
		setPrefSize(width, height);
		lane = new Rectangle(width, height, Color.BLACK);
		lane.setStroke(Color.YELLOW);
		lane.setFill(Color.BLACK);
		light = new Circle(width / 2, height / 4, height / 8, lightColor);
		light.setStroke(Color.BLACK);
		getChildren().addAll(lane, light);
	}
	
	synchronized void changeLightColor(){
		if (trafficLight.getTrafficLightState() == TrafficLightState.RED) {
			lightColor = Color.GREEN;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.GREEN);
		} else if (trafficLight.getTrafficLightState() == TrafficLightState.GREEN) {
			lightColor = Color.YELLOW;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.YELLOW);
		} else {
			lightColor = Color.RED;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.RED);
		}
	}
	
	synchronized void addCar(Car car) {
		if (cars.size() > 3) {
			return;
		}
		car.setXPos((int) (width / 2 - car.getWidth() / 2));
		car.setYPos((int) (height - car.getHeight() - 5));
		car.setLayoutX(car.getXPos());
		car.setLayoutY(car.getYPos());
		getChildren().add(car);
	}

	@Override
	public void run() {
		while (!stop) {
            try {
                switch(trafficLight.getTrafficLightState()) {
                case GREEN:
                	Thread.sleep(9000);
                	moveCars();
                	break;
                case YELLOW:
                	Thread.sleep(3000);
                	break;
                case RED:
                	Thread.sleep(12000);
                	break;
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            changeLightColor();
        }
	}
	
	synchronized void moveCars() {
		if (!cars.isEmpty()) {
	        for (Car car : cars) {
	            int newY = (int) (car.getY() + car.getSpeed()); // Calculate new y-position based on speed
	            car.setY(newY); // Update car's y-position
	        }
	    }
    }

    synchronized void stopCars() {
        // Stop cars
    }
}
