package application;

import java.util.ArrayList;
import java.util.List;

import javafx.application.Platform;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;

public class Lane extends Pane implements Runnable{
	private Rectangle lane;
	private Circle light;
	private Line intersectionLine;
	private HBox labelBox = new HBox();
	private Label label = new Label("Car1: 60km/h @ 500, Car2: 50km/h @ 300, Car3: 50km/h @ 100");
	private Color lightColor = Color.GREEN;
	private double width = 400;
	private double height = 600;
	double conversionFactor = 1000.0 / 3600.0;
	private List<Car> cars;
	private TrafficLight trafficLight;
	private boolean stop = false;
	
	public Lane() {
		this.trafficLight = new TrafficLight();
		this.cars = new ArrayList<>();
		initializeGUI();
	}
	
	public void initializeGUI() {
		label.setTextFill(Color.WHITE);
		label.setWrapText(true);
		labelBox.getChildren().add(label);
		labelBox.setPrefWidth(width);
		setPrefSize(width, height);
		lane = new Rectangle(width, height, Color.BLACK);
		lane.setStroke(Color.YELLOW);
		lane.setFill(Color.BLACK);
		light = new Circle(width / 2, height / 8, height / 14, lightColor);
		light.setStroke(Color.BLACK);
		double intersectionLineY = height / 4;
		intersectionLine = new Line(0, intersectionLineY, width, intersectionLineY);
		intersectionLine.setStroke(Color.WHITE);
		getChildren().addAll(lane, light, intersectionLine, label);
	}
	
	synchronized void changeLightColor(){
		if (trafficLight.getTrafficLightState() == TrafficLightState.RED) {
			lightColor = Color.GREEN;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.GREEN);
		} else if (trafficLight.getTrafficLightState() == TrafficLightState.GREEN) {
			lightColor = Color.YELLOW;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.YELLOW);
		} else {
			lightColor = Color.RED;
			light.setFill(lightColor);
			trafficLight.setTrafficLightState(TrafficLightState.RED);
		}
	}
	
	synchronized void addCar(Car car) {
		if (cars.size() > 3) {
			return;
		}
		car.setXPos((int) (width / 2 - car.getWidth() / 2));
		car.setYPos((int) (height - car.getHeight() - 5));
		car.setLayoutX(car.getXPos());
		car.setLayoutY(car.getYPos());
		cars.add(car);
		getChildren().add(car);
	}

	@Override
	public void run() {
		while (!Thread.currentThread().isInterrupted()) {
            try {
            	if (stop) {
            		Thread.sleep(100);
            		continue;
            	}
                switch(trafficLight.getTrafficLightState()) {
                case GREEN:
                	moveCars();
                	for (Car car : cars) {
                		
                	}
                	Thread.sleep(4000);
                	break;
                case YELLOW:
                	moveCars();
                    Thread.sleep(3000);
                	break;
                case RED:
                	Thread.sleep(7000);
                	break;
                }
                if (!stop) {
                	changeLightColor();
                }
                
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                stop = true;
            }
            
        }
	}
	
	synchronized void moveCars() {
		if (!cars.isEmpty()) {
			double timeInSeconds = 4.0;
			if (lightColor == Color.YELLOW) {
				timeInSeconds = 3.0;
			}
			List<Car> carsToRemove = new ArrayList<>();
	        for (Car car : cars) {
	        	try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            int newY = (int) (car.getYPos() - car.getMoveDistance(timeInSeconds));
	            if (newY < 200) {
	            	carsToRemove.add(car);
	            } else {
	            	car.setYPos(newY); // Update car's y-position
		            car.setLayoutY(car.getYPos());
	            }
	        }
	        Platform.runLater(() -> {
	            for (Car carToRemove : carsToRemove) {
	                getChildren().remove(carToRemove);
	                cars.remove(carToRemove);
	            }
	        });
	    }
    }

    synchronized List<Car> getCars() {
        return cars;
    }
    
    synchronized void carLabels() {
    	
    }
    
    synchronized void pause() {
    	stop = true;
    }
    
    synchronized void resume() {
    	stop = false;
    }
}
