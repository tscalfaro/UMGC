package application;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;


public class Main extends Application {
	private int seconds = 0;
	private HBox laneContainer;
	private VBox topBox;
	private Label timerLabel;
	private Button pauseBtn;
	private Button stopBtn;
	private Button startBtn;
	private Button addLaneBtn;
	private Timer timer;
	private List<Thread> threads;
	private List<Lane> lanes = new ArrayList<>();
	private boolean started = false;
	Random random = new Random();
	
	@Override
	public void start(Stage primaryStage) {
		try {
			//Timer
			timerLabel = new Label("Seconds: 0");
			timerLabel.setStyle("-fx-pref-width: 100px;");
			//Timer Container
			topBox = new VBox();
			topBox.setPadding(new Insets(10));
			topBox.setSpacing(20);
			topBox.getChildren().add(timerLabel);
			
			//Buttons
			pauseBtn = new Button("Pause");
			pauseBtn.setOnAction(event -> pauseBtnHandler());
			stopBtn = new Button("Stop");
			stopBtn.setOnAction(event -> stopBtnHandler());
			startBtn = new Button("Start");
			startBtn.setOnAction(event -> startBtnHandler());
			addLaneBtn = new Button("Add Lane");
			addLaneBtn.setOnAction(event -> addLaneBtnHandler());
			
			//Button Container
			HBox btnBox = new HBox();
			btnBox.setPadding(new Insets(10));
			btnBox.setSpacing(25);
			btnBox.setAlignment(Pos.CENTER);
			btnBox.getChildren().addAll(startBtn, stopBtn, pauseBtn, addLaneBtn);
			
			//Test Lane
//			Lane lane = new Lane();
//			Lane lane2 = new Lane();
//			Lane lane3 = new Lane();
//			Car car1 = new Car(50, 30, (int) (Math.random() % 15));
//			lane.addCar(car1);
			
			//Lane Container
			laneContainer = new HBox();
			laneContainer.setPadding(new Insets(10));
			laneContainer.setAlignment(Pos.CENTER);
			laneContainer.setSpacing(15);
//			laneContainer.getChildren().addAll(lane);
			
			BorderPane root = new BorderPane();
			root.setTop(topBox);
			root.setCenter(laneContainer);
			root.setBottom(btnBox);
			Scene scene = new Scene(root,1200,750);
			//scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.setTitle("Traffic Light Simulator");
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	private void startBtnHandler() {
		startTimer();
		started = true;
		if (threads != null) {
			for (Thread thread : threads) {
				thread.start();
			}
		}
	}
	
	private void stopBtnHandler() {
		if (timer != null) {
			timer.cancel();
			seconds = 0;
		}
		laneContainer.getChildren().clear();
		if (pauseBtn.getText().equals("Continue")) {
			pauseBtn.setText("Pause");
		}
		if (threads != null) {
			for (Thread thread : threads) {
				thread.interrupt();
			}
			threads.clear();
		}
	}
	
	private void pauseBtnHandler() {
		if (pauseBtn.getText().equals("Pause")) {
			timer.cancel();
			pauseBtn.setText("Continue");
			if (threads != null) {
				lanes.forEach(Lane::pause);
			}
			
		} else {
			startTimer();
			if (threads != null) {
				lanes.forEach(Lane::resume);
			}
			pauseBtn.setText("Pause");
		}
		
	}
	
	private void addLaneBtnHandler() {
		if (threads == null) {
			threads = new ArrayList<>();
		}
		Lane lane = new Lane();
		lanes.add(lane);
		lane.setOnMousePressed(e -> {
			if (e.isPrimaryButtonDown()) {
				int randomSpeed = random.nextInt(65 - 30 + 1) + 30;
				Car car = new Car(30, 60, randomSpeed);
				lane.addCar(car);
			}
		});
		if (laneContainer.getChildren().size() > 4) {
			addLaneBtn.setText("Maximum Lanes Reached");
			return;
		}
		laneContainer.getChildren().add(lane);
		Thread t = new Thread(lane);
		threads.add(t);
		if (started == true) {
			t.start();
		}
	}
	
	
	private void startTimer() {
		if (timer != null) {
			timer.cancel();
		}
        timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                seconds++;
                Platform.runLater(() -> {
                    timerLabel.setText("Seconds: " + seconds);
                });
            }
        };
        timer.scheduleAtFixedRate(task, 0, 1000);
    }
}
