package application;

public class Interval<TypeTime extends Time> {
	private TypeTime start;
	private TypeTime end;
	
	public Interval(TypeTime start, TypeTime end) {
		this.start = start;
		this.end = end;
	}
	
	public TypeTime getStart() {
		return start;
	}
	
	public TypeTime getEnd() {
		return end;	
	}
	
	public boolean within(TypeTime value) {
		int thisStart24 = Integer.parseInt(this.getStart().to24Hours());
	    int thisEnd24 = Integer.parseInt(this.getEnd().to24Hours());
	    int value24 = Integer.parseInt(value.to24Hours());

	    return value24 >= thisStart24 && value24 <= thisEnd24;
	}
	
	public boolean subinterval(Interval<TypeTime> other) {
		int thisStart24 = Integer.parseInt(this.getStart().to24Hours());
	    int thisEnd24 = Integer.parseInt(this.getEnd().to24Hours());
	    int otherStart24 = Integer.parseInt(other.getStart().to24Hours());
	    int otherEnd24 = Integer.parseInt(other.getEnd().to24Hours());

	    return otherStart24 >= thisStart24 && otherEnd24 <= thisEnd24;
	}
	
	public boolean overlaps(Interval<TypeTime> other) {
		int thisStart24 = Integer.parseInt(this.start.to24Hours());
	    int thisEnd24 = Integer.parseInt(this.end.to24Hours());
	    int otherStart24 = Integer.parseInt(other.getStart().to24Hours());
	    int otherEnd24 = Integer.parseInt(other.getEnd().to24Hours());

	    return thisEnd24 >= otherStart24 && thisStart24 <= otherEnd24;
	}
}
