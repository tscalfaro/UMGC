package application;

public class Interval<TypeTime extends Time> {
	private TypeTime start;
	private TypeTime end;
	
	public Interval(TypeTime start, TypeTime end) {
		this.start = start;
		this.end = end;
	}
	
	public TypeTime getStart() {
		return start;
	}
	
	public TypeTime getEnd() {
		return end;	
	}
	
	public boolean within(TypeTime value) {
		 if (start.compareTo(end) <= 0) {
		        // Interval does not span across 12:00 PM
		        return value.compareTo(start) >= 0 && value.compareTo(end) <= 0;
		    } else {
		        // Interval spans across 12:00 PM, handle the cases separately
		        return (value.compareTo(start) >= 0 && value.compareTo(end) <= 0) || 
		               (value.compareTo(start) >= 0 && value.compareTo(end) >= 0) || 
		               (value.compareTo(start) <= 0 && value.compareTo(end) <= 0);
		    }
	}
	
	public boolean subinterval(Interval<TypeTime> other) {
		return other.getStart().compareTo(start) >= 0 && other.getStart().compareTo(end) <= 0 &&
		           other.getEnd().compareTo(start) >= 0 && other.getEnd().compareTo(end) <= 0;
	}
	
	public boolean overlaps(Interval<TypeTime> other) {
		int thisStart24 = Integer.parseInt(this.start.to24Hours());
	    int thisEnd24 = Integer.parseInt(this.end.to24Hours());
	    int otherStart24 = Integer.parseInt(other.getStart().to24Hours());
	    int otherEnd24 = Integer.parseInt(other.getEnd().to24Hours());

	    return thisEnd24 >= otherStart24 && thisStart24 <= otherEnd24;
	}
}
