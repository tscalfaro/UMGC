function minEditDistance(word1: string, word2: string) -> int:
    m = length of word1
    n = length of word2
    dp = 2D array of size (m+1) x (n+1) initialized to 0

    // Base cases
    for i from 0 to m:
        dp[i][0] = i
    for j from 0 to n:
        dp[0][j] = j

    // Fill the dp table
    for i from 1 to m:
        for j from 1 to n:
            if word1[i-1] == word2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j],   // Deletion
                                   dp[i][j-1],   // Insertion
                                   dp[i-1][j-1]) // Substitution

    return dp[m][n]
